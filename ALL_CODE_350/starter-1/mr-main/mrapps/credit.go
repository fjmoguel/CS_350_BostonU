package main

//
// a MR application you need to develop
// go build -buildmode=plugin credit.go
//

import (
	"cs350/mr"
	"log"
	"strconv"
	"strings"
)

// The map function is called once for each file of input. The first
// argument is the name of the input file, and the second is the
// file's complete contents. You should ignore the input file name,
// and look only at the contents argument. The return value is a slice
// of key/value pairs.
func Map(filename string, contents string) []mr.KeyValue {
	var kvs []mr.KeyValue
	lines := strings.Split(contents, "\n")
	for _, line := range lines {
		fields := strings.Split(line, ",")
		if len(fields) != 4 {
			continue
		}

		userID, agency, year, scoreStr := fields[0], fields[1], fields[2], fields[3]
		if scoreStr == "Credit Score" {
			continue // skip the header row because it contains no data
		}
		score, err := strconv.Atoi(scoreStr)
		if err != nil {
			log.Printf("Invalid score for %s, cannot parse new line", userID)
			continue
		}

		if year == "2023" && score > 400 {
			kvs = append(kvs, mr.KeyValue{Key: agency, Value: "1"})
		}
	}
	return kvs
}

// The reduce function is called once for each key generated by the
// map tasks, with a list of all the values created for that key by
// any map task.
func Reduce(key string, values []string) string {
	count := 0
	for _, value := range values {
		if value == "1" {
			count++
		}
	}
	return strconv.Itoa(count)
}
